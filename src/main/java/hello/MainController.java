package hello;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import hello.User;
import hello.UserRepository;
import hello.Books;
import hello.BooksRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
			   // I added also book repository for book class.
	private UserRepository userRepository;
	
	@Autowired
	private BooksRepository bookRepository;
	
	private List<User> ListOfUsers;
	private List<Books> ListOfBooks;
	
	@GetMapping(path="/addUser") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		
		User n = new User();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		return "Saved";
	}
	
	@GetMapping(path="/addBook") // Map ONLY GET Requests
	public @ResponseBody String addNewBook (@RequestParam String bookName
			, @RequestParam String bookAuthor) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		
		Books book = new Books();
		book.setbookName(bookName);
		book.setbookAuthor(bookAuthor);
		bookRepository.save(book);
		return "Book added!";
	}
	
	
	@GetMapping(path="/allBooks")
	public @ResponseBody ResponseEntity<StringBuilder> getAllBooks() {
		// This returns a JSON or XML with the users
		
		
		ListOfBooks = (List<Books>)bookRepository.findAll();
		List<String> booksToPrint = new ArrayList<String>();
		StringBuilder books = new StringBuilder();
		
		HttpHeaders httpHeaders = new HttpHeaders();
	    httpHeaders.setContentType(org.springframework.http.MediaType.TEXT_PLAIN);
		
		for(Books book : ListOfBooks)
		{
			booksToPrint.add(new String(book.toString() + "\n"));
		}
		
		for(String s : booksToPrint)
		{
			books.append(s);
		}
		
		return new ResponseEntity<StringBuilder>(books, httpHeaders, HttpStatus.OK);
	}
	

	@ResponseBody
	@GetMapping(path="/allUsers")
	public ResponseEntity<StringBuilder> getAllUsers() {
		// This returns a JSON or XML with the users
		ListOfUsers = (List<User>)userRepository.findAll();
		List<String> usersToPrint = new ArrayList<String>();
		StringBuilder users = new StringBuilder();
		
		HttpHeaders httpHeaders = new HttpHeaders();
	    httpHeaders.setContentType(org.springframework.http.MediaType.TEXT_PLAIN);
		
		for(User user : ListOfUsers)
		{
			 usersToPrint.add(new String(user.toString() + "\n"));
		}
		
		for(String s : usersToPrint)
		{
			users.append(s);
		}
		
		return new ResponseEntity<StringBuilder>(users, httpHeaders, HttpStatus.OK);
		
	}
	
}
